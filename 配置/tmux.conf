# 插件
set -g @plugin 'tmux-plugins/tpm'
#set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'      # 保存tmux会话
set -g @resurrect-strategy-vim 'session'          # 恢复vim
set -g @resurrect-capture-pane-contents 'on'      # 保存和恢复pane内容
#set -g @plugin 'tmux-plugins/tmux-fpp'           # 快速打开终端窗口上的任何路径
set -g @plugin 'MunifTanjim/tmux-mode-indicator'  # 显示提示的插件, 指示当前活动的Tmux模式
set -g @plugin 'tmux-plugins/tmux-sidebar'        # 它为当前路径打开一个树目录列表
set -g @plugin 'tmux-plugins/tmux-yank'           # 将内容复制到系统剪贴板
#set -g @plugin 'aaronpowell/tmux-weather'

#设置前缀为Alt + j
unbind C-b
set -g prefix M-j
bind M-j send-prefix                              # 按两次M-j 即可将此组合键发送至窗口里的程序
set -g mouse on                                   # 鼠标支持

#将r设置为加载配置文件, 并显示"reloaded!"信息
bind r source-file ~/.tmux.conf \; display-message -d 100 "   Tmux Config Reloaded !"
#set -g default-terminal "screen-256color"             # 开启256 colors支持

# vim中功能按键(esc, Fn)延迟50毫秒, 
set -g escape-time 10                     # 延时(松开prefix键和按下命令键之间的延时时间)
set -sg repeat-time 600                   # increase repeat timeout

# window监控
set -g monitor-activity off               # 非当前窗口有内容更新时在状态栏突出显示
set -g activity-action any                # 任何window活动会在当前window
#set -g visual-activity both              # 发送消息和响铃

# window
## window index
set -g base-index 1                                       # 窗口的初始序号；默认为0, 这里设置为1
set -g renumber-windows off                               # 关闭重新编号
set -g display-time 1000                                  # 提示信息的持续时间；设置足够的时间以避免看不清提示, 单位为毫秒

set -g history-limit 20000                                # window的历史记录行数

# pane
set -g pane-base-index 1                              # 设置面板的起始下标为1, 与pane索引一致
set -gw pane-active-border-style fg="yellow"          # 设置正在使用的窗口的边界颜色, 在不同窗口切换时边界颜色会变化
set -gw pane-border-style fg="cyan"                   # 设置非活动窗口的边界颜色
set -gw pane-border-lines single                      # 边框样式
set -gw pane-border-status off                        # 边框状态线
set -gw display-panes-time 10000                      # 显示pane索引的时间
bind a set -w synchronize-panes                       # 将同步窗格的按键绑定到a
bind O display-popup -E                               # 弹出窗口
bind -N "将mark的pane转为当前window的pane" @ join-pane 
bind -N "将mark的pane和当前的pane交换" \\ swap-pane

# 面板切换
bind-key k select-pane -U              # up
bind-key j select-pane -D              # down
bind-key h select-pane -L              # left
bind-key l select-pane -R              # right

# 调整面板大小
bind -r K resize-pane -U 5
bind -r J resize-pane -D 5
bind -r H resize-pane -L 5
bind -r L resize-pane -R 5

# 重新映射面板分割
unbind '"'
#bind - splitw -v -c '#{pane_current_path}' 'watch echo a #{command} a'     # 分割成上下两个pane, 默认进入当前目录
bind - splitw -v -c '#{pane_current_path}'                                  # 分割成上下两个pane, 默认进入当前目录
bind M-- splitw -fv -c '#{pane_current_path}'                               # 创建整个下pane, 默认进入当前目录
unbind %
bind | splitw -h -c '#{pane_current_path}'                                  # 分割成左右两个pane
bind M-| splitw -fh -c '#{pane_current_path}'                               # 创建整个右pane

# 复制
## buffer缓存
setw -g mode-keys vi                                                        # 复制模式中的默认键盘布局；可以设置为vi或emacs
bind -r Escape copy-mode                                                    # 绑定esc键为进入复制模式
bind -T copy-mode-vi v send-keys -X begin-selection                         # 绑定v键为开始选择文本
bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel               # 绑定y键为复制选中文本

# 系统黏贴板
# normal 模式:
#   prefix + y: 将命令行上的文本复制到系统剪贴板；
#   prefix + Y: 将当前窗格的当前路径复制到系统剪贴板；
# copy 模式:
#   y: 将选取的内容复制到系统剪贴板；
#   Y: 将选取的内容复制并粘贴到命令行；

# ssh key binding
bind * display-menu -T "ssh tools" -x P -y P \
ssh | "splitw -h #(ps -t #{pane_tty} -o command -h | grep -w '^ssh')" \
ssh - "splitw -v #(ps -t #{pane_tty} -o command -h | grep -w '^ssh')" \
"" \
sshf | "splitw -fh #(ps -t #{pane_tty} -o command -h | grep -w '^ssh')" \
sshf - "splitw -fv #(ps -t #{pane_tty} -o command -h | grep -w '^ssh')" \

# 状态栏  
set -g status on
set -g status-position bottom
set -g status-interval 1                      # 状态栏刷新时间
set -g status-style "fg=white"                # 背景色, 前景色
set -g status-justify absolute-centre         # 状态栏列表左对齐
set -g status-keys vi                         # 操作状态栏时的默认键盘布局；可以设置为vi或emacs

# status-left
set -g status-left-length 300 											                          # 状态栏左边长度300
set -g status-left "🍁 #{tmux_mode_indicator} #S: #I #W(#P)" 			            # 状态栏左侧内容

# status-right
set -g status-right "#(date +%m-%d' '%H:%M:%S'  ')"           # 状态栏右方的内容；这里的设置将得到类似23:59的显示
set -g status-right-length 20                                 # 状态栏右方的内容长度；建议把更多的空间留给状态栏左方（用于列出当前窗口）

# status-mid
set -wg window-status-format " #I #W "                # 状态栏window列表名称格式
set -wg window-status-separator ""                    # 状态栏window列表名称之间的间隔
set -wg window-status-current-format " #I:#W#F"       # 状态栏当前窗口名称格式(#I：序号，#w：窗口名称，#F：间隔符)
set -wg window-status-current-style "fg=yellow"       # 状态栏当前窗口名称的样式
set -wg window-status-last-style "fg=red"             # 状态栏最后一个窗口名称的样式

# message
set -g message-style "fg=white"         # 指定消息通知的前景、后景色
set -g message-command-style "fg=blue"

# 关闭自动重命名
set -gw automatic-rename off
set -gw allow-rename off
set -g set-titles off       # 关闭默认窗口标题

run '~/.tmux/plugins/tpm/tpm'
