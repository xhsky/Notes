简介
	时间，作者，开发语言，定义
		ZooKeeper是一个分布式协调服务，是Google的Chubby一个开源的实现，由雅虎模仿开发，提供提供功能：
			组管理服务
			分布式配置服务
			分布式同步服务
			分布式命名服务
			http://www.cnblogs.com/felixzh/p/5869212.html
	官网：
		https://zookeeper.apache.org/
		中文网：http://zookeeper.majunwei.com/
	版本
	协议
适用性(优缺)
	配置管理，名字服务，提供分布式同步以及集群管理
	配置管理：
		
架构
	模块
	安装:
		# wget -c http://apache.fayea.com/zookeeper/current/zookeeper-3.4.9.tar.gz
		# tar -xf * ; cd 
		# cp conf/zoo_sample.cfg conf/zoo.cfg
		# vim conf/zoo.cfg
			dataDir=
			datalogDir=
			clientPort=2181
			server.1=node1:2888:3888
			server.2=node2:2888:3888
			server.3=node3:2888:3888
		# 在各个节点上建立data和log目录，并在data中创建myid文件，并写入当前节点的server id
		# 启动
			# ./bin/zkServer.sh start
		# 连接
			# ./bin/zkCli.sh
		
		注：
			1. 生产环境建议使用5个Zookeeper，分别在不同的主机上
	结构
		目录结构
			源码目录
			安装目录：
				bin：zk的可执行脚本目录，包括zk服务进程，zk客户端等
					zkServer.sh
					zkCli.sh
					zkCleanup.sh  
					zkEnv.sh  
					
				conf：配置文件目录
					configuration.xsl：
					log4j.properties：日志配置文件
					zoo_sample.cfg：为样例配置文件，一般mv为zoo.cfg
						时间：
						tickTime=2000					# 单位为毫秒，是zk使用的基本时间度量单位
						initLimit=10					# Follower在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。
														# Leader允许F在initLimit时间内完成这个工作。当集群数量太大时可适当调高此参数。默认10个tick
						syncLimit=5						# 在运行过程中，Leader负责与ZK集群中所有机器进行通信，超过此时间量，则被认为down
														# 如果Leader发出心跳包在syncLimit之后，还没有从F那里收到响应，那么就认为这个F已经不在线了。默认5个tick
						minSessionTimeout				# Session超时时间限制，由服务器规定范围，若客户端设置的超时时间不在这个范围，那么会被强制设置为最大或最
						maxSessionTimeout				# 小时间。默认的Session超时时间是在2*tickTime ~ 20*tickTime
						cnxTimeout						# Leader选举过程中，打开一次连接的超时时间，默认是5s
						
						日志：
						dataDir=/tmp/zookeeper			# 用于配置存储快照文件的目录，若无datalogDir参数，则事务日志也会存储在此
						datalogDir						# 事务日志输出目录
						forceSync						# 是否需要在事务日志提交的时候调用FileChannel.force来保证数据完全同步到磁盘
						preAllocSize					# 预先开辟磁盘空间，用于后续写入日志，默认64M。每个事务日志大小就是64M，
														# 若zk快照频率较大，则可适当减小此参数
						snapCount						# 每进行snapCount次的事务日志输出后，就触发一次快照。此时，zk会生成一个
														# snapshot.*文件，同时创建一个新的事务日志文件log.*。参数值默认是100000。
						traceFile						# 用于记录所有请求的log，一般调试过程中可以使用，但是生产环境不建议使用，会严重影响性能
						fsync.warningthresholdms		# 事务日志输出时，如果调用fsync方法超过指定的超时时间，那么会在日志中输出警告信息。默认是1000ms
						autopurge.purgeInterval			# zk提供了自动清理事务日志和快照文件的功能，这个参数指定了清理频率，单位是小时。默认是0，表示不开启自动清理功能
						autopurge.snapRetainCount		# 在自动清除后分别保留的快照和日志文件，默认是3个，最小值是3个
						syncEnabled						# 默认为true，设置false禁用此功能
						
						端口：
						clientPort=2181					# zk服务进程的监听端口
						secureClientPort				# zk服务SSL连接的端口
						clientPortAddress				# 对于多网卡的机器，可以为每个IP指定不同的监听端口。默认情况是所有IP都监听 clientPort指定的端口
						server.x=[hostname]:nnnnn[:nnnnn]
														# 这里的x是一个数字，与myid文件中的id是一致的，范围是1-255。右边可以配置两个端口，第一个端口用于F和L之间的数据同步和其它通信，
														# 第二个端口用于Leader选举过程中投票通信
						leaderServes					# 默认情况下，Leader接受客户端连接，并提供正常的读写服务。可将此参数设置为no,会大大提高写操作的性能(三台以上时建议为no)
						maxClientCnxns					# 单个客户端与单台服务器之间的连接数的限制，是ip级别的，默认是60，如果设置为0，则表明不作任何限制
						globalOutstandingLimit			# 最大请求堆积数，默认1000。zk缓存的客户端请求数
						group.x=nnnnn[:nnnnn]
						weight.x=nnnnn					# 对机器分组和权重设置
						jute.maxbuffer					# 每个节点最大数据量，是默认是1M。这个限制必须在server和client端都进行设置才会生效
						standaloneEnabled				# 
						权限：
						zookeeper.DigestAuthenticationProvider.superDigest			# zk权限设置相关
						skipACL							# 对所有客户端请求都不作ACL检查
						
						

						

						
						
				contrib：用户操作zk的工具包
				dist-maven/  
				docs/  
				lib：库文件  
				recipes：zk某些用法的代码示例
				src：
			
		进程结构
				java进程(QuorumPeerMain)
			端口
				2081：客户端连接服务器端口
				2888：用于和其它节点之间进行数据同步
				3888：用于leader选举投票通信
		编程接口
		管理软件
	命令
		服务器
		客户端：
			./bin/zkCli.sh 				# 默认连接localhost:2181
				-server host:port
	日志：
		说明：zookeeper的默认日志输出是在当前目录的zookeeper.out
		配置：
			# vim ./conf/log4j.properties
				zookeeper.root.logger=INFO,ROLLINGFILE
				zookeeper.log.dir=/home/sky/program/zookeeper1/log/
				zookeeper.log.file=zookeeper.log
			# vim ./bin/zkEnv.sh
				ZOO_LOG_DIR="ZOO_LOG_DIR="/home/sky/program/zookeeper1/log/""
				ZOO_LOG4J_PROP="INFO,ROLLINGFILE"
			# vim .bin/zkServer.sh
				 > "$_ZOO_DAEMON_OUT" 2>&1 <     改为 &>>
	优化
	安全
	集群
		说明：
			1.zookeeper集群必须采用奇数个机器
			2.Zookeeper集群是高可靠的，且属于自修复，即故障服务一旦重新启动，会自动重新加入集合，无需任何手动交互
		
		Observers：通过扩展Zookeeper集群而不损害写性能
			说明：当添加更多的follower时，可以扩大集群规模，但是写性能下降。因为写操作需要一个集群中至少一半的节点
					同意，投票成本会显著增加。故引入了observe节点，客户端可以连接observe，请发送请求，observe将这些
					请求发送给leader，等待leader的回复。observe不参加投票选举，除此之外与follower功能完全相同
			配置：
				1.# vim ./conf/zoo.cfg
					peerType=observer
				2.在每个节点的配置文件中声明：
					# vim ./conf/zoo.cfg
						server.n:ip:port1:port2:observer
			特性：
				1.Observe的断开与连接不会影响Zookeeper的可用性
				2.读性能上升，写操作的网络流量小
				

		
具体服务相关
	概念:
		zookeeper的主要角色：
			Leader：领导者，主要负责投票的发起和决议，以及更新系统状态
			Follower：接受客户端的请求并返回结果给客户端，并参与投票
			Observe：接受客户端的请求，将写的请求转发给Leader，不参与投票。Observer目的是扩展系统，提高读的速度
			Client：客户端
		Zookeeper特性：
			1.读写模式：
				在ZooKeeper集群中，读可从任意ZooKeeper Server读，写的请求会先F到L，然后由Leader来通过ZooKeeper中
				的原子广播协议，将请求广播给所有的F，L收到一半以上的写成功的Ack后，就认为该写成功了，就会将该写
				进行持久化，并告诉客户端写成功了
			2.WAL和Snapshot
				ZooKeeper也有WAL，对于每一个更新操作，ZooKeeper都会先写WAL, 然后再对内存中的数据做更新，然后向
				Client通知更新结果。另外，ZooKeeper还会定期将内存中的目录树进行Snapshot。这么做的主要目的，一当然
				是数据的持久化，二是加快重启之后的恢复速度，如果全部通过Replay WAL的形式恢复的话，会比较慢
			3.FIFO
				对于每一个ZooKeeper客户端而言，所有的操作都是遵循FIFO顺序的，这一特性是由下面两个基本特性来保证
				的：一是ZooKeeper Client与Server之间的网络通信是基于TCP，TCP保证了Client/Server之间传输包的顺序；
				二是ZooKeeper Server执行客户端请求也是严格按照FIFO顺序的
			4.Linearizability
				在ZooKeeper中，所有的更新操作都有严格的偏序关系，更新操作都是串行执行的，这一点是保证ZooKeeper功能
				正确性的关键。
		设计目标：
			
	
		每个Server在工作过程中有三种状态： 
			LOOKING：当前Server不知道leader是谁，正在搜寻
			LEADING：当前Server即为选举出来的leader
			FOLLOWING：leader已经选举出来，当前Server与之同步

		
		Znode：
			说明:
				1.数据模型是一个基于树形结构的命名空间，与文件系统类似。每个节点称为znode，每个znode都有唯一的路径
				2.Znode可以存储数据，可以有子节点
				3.节点不支持重命名
				4.数据大小不超过1M(可配置)
				
				
			类型：
				永久节点：用户可以显式地创建、删除
				临时节点：用户创建之后可以显式地删除，也可由创建它的Session结束后由zookeeper server自动删除。且无子节点目录
				
				Znode可以在创建事指定Sequential属性，则ZNode的名字后面会自动追加一个10位长度，左边以0填充的递增数字
				
				注：
					1.Sequential与non-sequential可以与永久节点和临时节点结合
					2.因其属性，sequential类型在创建时可以重名
				
		Session：
			1.Client和Zookeeper之间采用长连接
			2.Zookeeper会把这个Session持久化。所以在Session未超时之前，client与Zookeeper server的连接在各个Zookeeper sever之间透明地移动
			3.Client定期发送ping包来检查和保存server的连接
			4.一旦session结束或超时，所有临时节点会被删除
		Watcher：
			1.Watch是client安装在server的事件监听方法
			2.当监听的节点发生变化，server将通知所有注册的客户端
			3.客户端使用单线程对所有时间按顺序同步回调：
				客户端连接，断开连接
				节点数据发生变化
				节点本身发生变化
			4.Watcher是一次性的，即触发一次就会被取消，如果想继续Watch的话，需要客户端重新设置Watcher
			
			在读操作 exists、getChildren和getData上可以设置观察，这些观察可以被写操作create、delete和setData触发
		myid：
			由一行只包含该机器id的文本组成，id必须在整体内是唯一的，并且值应介于1到255之间。主要为每台计算机指定服
			务器标识
		
		配额：
			说明：Zookeeper有节点个数和空间大小配额，若用户超过分配的配额，会在日志中打印WARN信息，
				  但并不会限制client行为。所有配额信息存储在/zookeeper/quota目录下
			命令：
				设置配额：
					# setquota -n/-b N /path/dir
						-n：表示znode count本身限制，表示该目录及其子目录个数限制为N
						-b：表示znode本身数据的字节大小限制
				列出配额：
					# listquota /path/dir
				删除配额：
					# delquota /path/dir
		

		Zookeeper的数据目录包含的文件时由znode的永久副本。这些是快照和事务日志文件。当对znode进行更改时，这些
		更改将会追加到事务日志中。当日志变大时，所有的znode的当前状态的快照将写入文件系统，同时，此快照会取代
		以前的日志
	内部命令
		stat path [watch]								# 
		set path data [version]
		ls path [watch]
		delquota [-n|-b] path
		ls2 path [watch]
		setAcl path acl
		setquota -n|-b val path
		history 
		redo cmdno
		printwatches on|off
		delete path [version]
		sync path
		sync path
		listquota path
		rmr path
		get path [watch]
		create [-s] [-e] path data acl
		addauth scheme auth
		quit 
		getAcl path
		close 
		connect host:port

		监控：主要通过两种方式之一
			1.命令端口使用4字母
			2.JMX
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
