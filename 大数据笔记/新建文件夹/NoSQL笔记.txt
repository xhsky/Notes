
NoSQL：Not Only SQL
	说明: 是一项全新的数据库革命性运动，随着Web2.0网站的兴起，传统的关系型数据库在应付Web2.0网站，特别是超大规模和高并发的SNS类型的Web2.0纯动态网站已力不从心，NoSQL随之兴起
  历史:
    1.最早1998年出现,由Carlo Strozzi开发的一个轻量,开源,不提供SQL功能的关系数据库
    2.2009年再次提出了NoSQL的概念,这时的NoSQL主要指非关系型,分布式,不提供ACID的数据库设计模式
    3.2009年亚特兰大"no:sql"讨论会是一个里程碑,提出"select fun,profit from real_world where relational=false".
    4.对NoSQL最普遍的解释是"非关系型",强调Key-Value存储和文档数据库的优点,而非单纯反对RDBMS
特性:
	NoSQL是以key-value形式存储的，其特点：
		1.非关系型，分布式，开源，水平可扩展
    2.元数据和应用数据分离
		3.适于处理海量数据,分布式计算,击碎了性能瓶颈
    4.低成本
    5.没有标准化,简单的数据模式
    6.有限的查询功能
    7.没有统一的数据查询模型
	NoSQL适用场景：
		1.对数据高并发读写
		2.对海量数据的高效率存储和访问
		3.对数据的高可扩展和高可用
  CAP定理:
    说明: 又称布鲁尔定理.它提出对于一个分布式计算系统来说,不可能同时满足以下三点:
      1.C(Consistency)一致性:             所有节点在同一时间具有相同的数据
      2.A(Availability)可用性:            每个请求不管成功或失败都有响应
      3.P(Partition tolerance)分区容错性: 系统中任意信息的丢失或失败不会影响系统的继续运作
      CAP的核心理论是: 一个分布式系统不可能同时很好的满足以上三个需求,最多只能同时较好的满足两个.因此根据CAP原理将NoSQL数据库分成了满足CA,CP,AP原则的三大类:
        1.CA-单点集群,通常在可扩展性上不太强大: RDBMS
        2.CP-通常性能不高:                      MongoDB,HBase,Redis
        3.AP-通常对一致性要求较低:              CouchDB,Cassandra,DynamoDB,Riak
  BASE:
    说明: Basically Available, Soft-state, Eventually Consistent.由Eric Brewer定义分布式系统标准
    BASE是NoSQL数据库对可用性及一致性的弱要求原则
      Basically Available:  基本可用
      Soft-state:           软状态/柔性事务.Soft state为无连接的,而Hard state是面向连接的
      Eventually Consistent:最终一致性
  NoSQL数据库分类(以存储模型分类):
    类型              代表                 应用场景                         特点
    列存储:         HBase,Cassandra   分布式文件系统/存储       按列存储数据,将同一列或某些列存储在一起,方便存储结构化和半结构化的数据,方便数据压缩,对针对列的查询有非常大的IO优势.可扩展性强,易于实现分布式
    key/value:      Redis,MemcacheDB      内容缓存              可通过key快速查询到其value.存储不管value的格式
    文档存储:       MongoDB,CouchDB       web应用               类似于key/value存储,但value指向结构化存储.一般用于类json格式的存储.存储内容是文档性的.易对某些字段建立索引,实现关系数据库的某些功能
    图存储:         Neo4J,FlockDB   社交网络,推荐系统,关系图谱  利用图结构相关算法提高性能.并满足特殊场景应用需求.但难以实现分布式.功能有定向性
    对象存储:       db4o,Versant                                通过面向对象的语法操作数据库,通过对象的方式存取数据
    xml数据库:      BaseX                                       高效地存储XML数据,并支持XML的内部查询语法

关系数据库ACID:
  1.A(Atomicity)原子性: 在事务中的操作要么所有都成功,要么所有都不成功,没有中间情况
  2.C(Consistency)一致性: 数据库一直处于一致的状态,事务的运行不会改变数据库原本的一致性约束
  3.I(Isolation)独立性: 并发的事务之间不会相互影响.如果一个事务要访问的数据正被另一个事务修改,只要另外那个事务未提交,则访问的数据不受未提交事务的影响
  4.D(Durability)持久性: 事务一旦提交后,它所做的修改将会永久保留在数据库上

RDBMS vs NoSQL
  RDBMS:
    - 高度组织化结构化数据
    - 结构化查询语言(SQL)
    - 数据和关系都存储在单独的表中。
    - 数据操纵语言,数据定义语言
    - 严格的一致性
    - 基础事务
  NoSQL:
    - 代表着不仅仅是SQL
    - 没有声明性查询语言
    - 没有预定义的模式
    - 键-值对存储,列存储,文档存储,图形数据库
    - 最终一致性，而非ACID属性
    - 非结构化和不可预知的数据
    - CAP定理
    - 高性能,高可用性和可伸缩性
ACID vs BASE
  ACID          BASE
  原子性        基本可用
  一致性        软状态
  隔离性        最终一致性
  持久性        无
 
数据库:
  1.NoSQL
  2.SQL
  3缓存数据库
数据一致性模型:
  强一致性: 不论在哪个节点上修改数据,修改后,所有节点数据相同
  弱一致性: 更改后,允许一段时间内的不一致
  最终一致性: 弱一致性的特例.能保证每次更改的结果均能一致
数据一致性的实现技术:
  Quorum系统NRW策略:
    N: 总的副本数
    R: 完成读操作所需要读取的最少副本数
    W: 完成写操作所需要写入的最少副本数
    R+W > N     强一致性:
    R+W <= N    最多保证最终一致性
  两段式提交(Two Phase Commit Protocol,2PC):  Oracle rac , mysql
    两类节点: 协调者 参与者
    第一阶段: 协调者询问参与者是否提交事务
    第二阶段: 参与者全部提交
  时间戳策略:
  Paxos算法:
  向量时钟:
NoSQL数据存储模型
  


