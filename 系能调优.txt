
系统性能：
	吞吐量：	每秒可以处理的请求数
	系统延迟：	系统在处理一个请求时的延迟
	
	注：吞吐量越大，系统延迟越长：请求量过大，系统繁忙，响应速度变低
		系统延迟越短，吞吐量越高：处理速度快，可以处理更多的请求
		
系统性能：
	CPU利用率：
	IO：
		磁盘IO：
		驱动IO：	eg：网卡
		内存换页率：
	网络带宽：
	
系能优化策略：
	以空间换时间：eg：各种Cache
	以时间换空间：eg：压缩算法，瓶颈在网络传输时
	简化代码：最高效的程序就是不执行任何代码的程序
		减少循环的层数
		减少递归
		在循环中少声明变量
		少做分配和释放内存的操作
		尽量把循环体内的表达式抽到循环外
		条件表达中的多个条件判断的次序
		注意函数调用的开销(栈上开销)
		注意面向对象语言中临时文件对象的开销
		小心使用异常(不要使用异常来检查一些可接受可忽略并经常发生的错误)
	并行处理：
		单核中的多进程和多线程可能更慢(操作系统调度和切换开销很大)
		
		
		
	算法调优
	代码调优
	网络调优
	TCP调优：
		TCP链接占用很多开销
			1.占用文件描述符
			2.开缓存
		参数：
			keepalived：
			RWIN
	UDP调优：
		MTU：最大化带宽利用率
	网卡调优：
		ehtool可以调整网卡的缓冲区大小，对于大数据量的网络传输非常有效
	其它网络性能：
		多路复用技术：一个线程来管理所有的TCP链接，三个系统调用
			select：在系统调用上只支持1024个链接
			poll：可以突破1024的限制
				select和poll本质上是一样的，使用轮询机制，采用O(n)算法
			epoll：内核支持。仅当链接在活跃时系统才会进行collback，由操作系统通知触发
		DNS Lookup：DNS反解的系统调用非常费时，其递归查询可能会导致严重超时
			可通过hosts文件来加快速度
	
	系统调优：
		I/O模型：
			1.同步阻塞I/O
			2.同步非阻塞：	通过fctnl设置O_NONBLOCK来完成
			3.select/poll/epoll：I/O不阻塞，在事件上阻塞
				I/O异步，事件同步
			4.AIO方式：是处理与I/O并行的模式
				I/O请求会立即返回，在后台完成I/O操作时，向应用程序发起通知。通知有两种方式(1.产生一个信号。2.执行一个
				基于线程的回调函数来完成I/O处理)
		多核CPU调优
			CPU0用来调整和分配其它CPU，可手动为其分配CPU核。可用taskset命令来设置
			多核CPU中NUMA技术(Non-Uniform Memory Access)，处理器被划分成多个node，每个node有自己的本地存储空间。可用numactl进行调优，
			传统的多核运算是SMP(Symmetric Multi-Processor)，多个处理器共享一个集中的存储器和I/O总线
		
		文件系统调优
			在大多数情况下都有帮助的一个参数时关闭文件系统访问时间，文件系统的notime参数
			
		数据库调优：
			1.数据库引擎调优：
				数据库锁的方式：
					在并发情况下，锁非常影响性能。性能最好的是不要锁，所以，分库分表，冗余数据，减少一致
					性事务处理，可有效地提高性能。NoSql就是牺牲了一致性和事务处理并冗余数据，从而达到了分布式和高性能
			
				数据库的存储方式：
					了解存储方式可以减轻I/O负载。不同的存储引擎有不同的侧重点，针对不同的业务会有不同的性能
				数据库的分布式策略
					要了解分布式的一致性算法，或主主，或主从，可做到数据库级别的水平扩展
			2.sql语句优化
				有各种工具来查看应用中的sql性能问题
			
			
			
			
			
			
方法：
	1.关闭daemon
		关闭一些不必要的后台服务，可以释放更多的内存、减少启动时间并减少CPU处理的进程数同时增强了服务器的安全性
		GUI一般不启用
	2.更改内核参数
	3.CPU调优
	4.内存调优
	5.文件系统调优
	6.网络系统调优
			
			
磁盘调优：
	一个优化的分区策略，可以很好的改进linux系统的性能，减少磁盘碎片，提高磁盘I/O
	
	越靠磁盘外部的柱面，旋转越快，每次旋转时读写头可以覆盖较多的区域
		分区时可将访问频率高，对系统性能影响较大的分区至于磁盘靠外部分
	减少磁盘碎片
		将内容经常改变的目录放在单独的分区
	数据备份
		很多备份工具对整个分区进行备份的效率要高，应将linux的几个主要目录作为单独的文件系统
	
	推荐的分区策略：
		/boot	swap	/home	/var	/tmp	/usr	/	保留
			
			
文件系统调优
	1.块大小
		根据服务器用途来设置块大小
			若在文件系统中的文件都是较大的文件，应使用较大的块大小可得到较好的性能
			一般为根目录保留了%5的空间，对一个大的文件系统，%5的比例较大，可减少比例
	2.不使用atime属性
		当文件被访问时，系统会记录访问时间并写入文件。对于频繁访问的文件系统可设置noatime，
		提高服务器的性能
			
			
			
			
			
			
			
			
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	