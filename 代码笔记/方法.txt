
编程语言
	一种将计算机所提供的解决问题的能力进一步进行抽象，由编程语言调用此能力
	
将高级语言转化为机器可识别的语言的过程，叫作编译/解释
	
程序 = 指令 + 数据		或者 数据结构 + 算法
		代码可以选择以指令为核心或以数据为核心进行编写
		
所有的编程语言的最终目的都是提供一种抽象方法	
	面向过程：程序 = 算法 + 数据结构
	面向对象：将问题空间中的元素以及它们在解空间中的表示物抽象为对象，并允许通过问题来描述问题
		而不是方案，实例保存着数据，但可以对自身的数据执行操作
	
数据结构：通过某种方式组织在一起的数据元素的集合

针对性比强大更为重要

运行机制：
		脚本解释性语言的内部机制
			1.python先将脚本编译成字节码文件(pyc,pyo)
			2.python虚拟机解释并运行字节码文件
		编译型语言的内部机制
			1.先将源代码编译成机器码，生成可执行文件
			2.运行可执行文件
	
两大类的编程语言
	面向过程
		以指令为中心，由指令处理数据
		如何组织代码解决问题
		程序具有一系列线性步骤，主体思想是代码作用于数据，主要工作是来设计算法的
	面向对象
		以数据为中心，所有的处理代码都围绕数据展开
		如何设计数据结构组织数据，并提供对此类数据所允许的处理操作
		围绕数据及为数据严格定义的接口来组织程序，用数据控制对代码的访问

		
方法论：
	1.笛卡尔方法论：
		·拆分
		·排序
		·处理
		·归并
	2.软件工程过程方法论：
		·软件生命周期
		·RUP统一软件过程管理
		·敏捷开发
	3.项目管理：
		计划、组织、执行、控制
		
解决现实世界的问题，不在于开发语言本身，而在于对方法论的参透和对现实世界的理解，编程语言只是个工具

编程世界的主流思想：
	1.结构化编程，面向过程的开发
		说明：面向功能分解
	2.函数式编程
		说明：基于lambda演算
	3.ER实体关系	
		说明：对象关系映射
	4.面向对象编程


编程语言比较：
				嵌入式		   网络应用		    网络界面		APP
	编译型：	C、C++		 Java、.net(C#)		flex AS		Android、objective-c
	
	解释型：   	Python、	 Python、Erlang	 	HTML、lisp		HTML5、Lua
				Erlang、lua	 Perl、Shell、Lua 	JavaScript
					
目前项目的要求：
	多任务、多线程、图形界面、跨平台、网络(分布式)、多种语言

程序员的境界：
	线性级 --> 逻辑级 --> 架构级 --> 工程级	
	
函数的设计规范
	耦合性：
		1.通过参数接受输入，以及通过return产生输出以保证函数的独立性
		2.尽量减少使用全局变量进行函数间通信
		3.不要在函数中修改可变类型的参数
		4.避免直接改变定义在另一个模块中的变量
	聚合性：
		1.每个函数都应该有一个单一的、同一的目标
		2.每个函数的功能都应该相对简单

基于数据编程：
	基本上所有的非普通计算机程序操作大量的数据，而且大量的应用程序被开发用来处理数据而不是进行计算任务。
	有些人估计当今世界上80%的应用程序开发会通过某种方式连接到数据库中的复杂数据，所以数据库对于很多应用
	来说是一种非常重要的基础

	
如果递归是自己调用自己的话,迭代就是A不停的调用B.
		
语言常用于
	Python/Ruby/PHP 		网站和手机应用程序的服务器端。
	Objective-C				IPhone的程序开发。
	HTML					网站的客户端。是构建网站的标记语言，网站的“积木”。
	CSS						网站的客户端。HTML的描述语言。
	JavaScript				网站客户端，用于控制HTML/CSS。jQuery是你需要知道的。
	Java/.Net				Android系统的编程。网站的服务器端，在大型企业中受欢迎。
	C/C++					高性能（如股票交易）或图形（电子游戏）的应用
	
软件的结构与运行过程却充满着太多不严格的环节。这种不严格，却给我们营造了一个可以发挥天赋或工科实践经验的空间
编程思想是独立于语言的
