
基本回收算法:
  引用计数(Reference Counting)
    该对象有一个引用计数，即添加/删除一个引用会更改计数。垃圾回收时，只回收计数为0的对象，此算法无法解决循环引用的问题
  标记-清理(Mark-Sweep)
    此算法执行分两个阶段，第一阶段从引用根节点开始标记所有被引用的对象。第二阶段遍历整个堆，把未标记的对象清理。此算法需要暂停整个应用，同时会产生内存碎片
  复制(Copying)
    此算法将内存划成两个相等的区域，每次只使用其中一个区域。垃圾回收时，遍历当前所用区域，把正在使用的中的对象复制到另一个区域中。
    此算法每次只能解决正在使用的对象，因而复制成本较小，同时复制之后还可以进行相应的内存整理。但需要两倍内存空间
  标记-整理(Mark-Compact)
    结合"标记清理"和"复制"两个算法的优点并分两个阶段。第一阶段从根节点开始标记所有被引用的对象。第二阶段遍历整个堆，清理未标记的对象并将标记的对象整理到
    堆中的一块。此算法避免了碎片和空间问题
  增量搜集(Incremental Collection):
  分代(Generational Collection):
    基于对对象生命周期分析后得出的垃圾回收算法。把对象分为年轻代，年老代，持久代。对于不同生命周期的对象用不同的算法进行回收



   
 Java:
  Young(年轻代):
    年轻代分为三个区: 一个Eden区，两个Survivor区。大部分对象在Eden区中生成。当Eden区满时，还存活的对象被复制到Survivor1区。当S1区满时，此区的存活对象将
    被复制到S0区。当S0区也满时，存活对象被复制到"年老区"(Tenured).
  Tenured(年老代)  
    年老代存放从年轻代存活的对象。一般来说年老代存放的都是生命期较长的对象
  Metaspace:
    用于存放静态文件(java类，方法等)。Metaspace对垃圾回收没有明显影响

  Young = Eden + S0 + S1
  Tenured: OldGen
  Metaspace: 本地内存 

  GC类型
    Scavenger GC
      一般情况下，当新对象生成，且在Eden申请空间失败时则触发Scavenger GC，Eden区进行GC，清理非存活对象，并且把存活的对象移动到S区，而后整理S的两个区
    Full GC
      对整个堆进行整理，包括Young，Tenured。Full GC比Scavenger GC要慢。当Tenured被写满，system.gc()显示调用，上一次GC之后的Heap分配策略动态变化则会引起
      Full GC



  Java 1.8废弃永久代(PermGen)使用元空间(Metaspace)
    原因: 移除永久代是为融合HotSpot JVM与JRockit VM而做出的努力。因为JRockit没有永久代，不需要配置
    说明: 
      元空间是方法区在HotSpot jvm中的实现，方法区主要用于存储类的信息，常量池，方法数据，方法代码等。逻辑上属于堆的一部分。元空间的本质和永久代类似，都是
      对JVM规范中方法区的实现。不过元空间与永久代的最大区别在于: 元空间不在jvm中，而是使用本地内存
    配置参数:
      1.MetaspaceSize: 初始化Metaspace大小。GC后动态调整该值。默认情况下，该值大小根据不同平台在12M到30M
      2.MaxMetaspaceSize: Metaspace的最大值。
      3.MinMetaspaceFreeRatio: 


   -Xmx1000m: 设置jvm最大可用内存
   -Xms1000m: 设置jvm初始化内存，该值可与-Xmx相同，避免每次GC回收后JVM重新分配内存
   -Xss128k: 每个线程的堆栈大小
   -XX:NewRatio=4: 年轻代(Eden和两个S)与老年代的比值。设置为4则年轻代和老年代所占比值为1:4。年轻代占整个堆栈的1/5
   -XX:SurvivorRatio=4: 设置年轻代中Eden和S区的大小比值。设置为4，则两个S与一个Eden的比值为2:4，一个S区占整个年轻代的1/6
    


